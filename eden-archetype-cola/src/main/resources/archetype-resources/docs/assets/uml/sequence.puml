#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
@startuml

!if %variable_exists("${symbol_dollar}THEME")
title 阿里巴巴 COLA 应用架构时序图 - ${symbol_dollar}THEME theme
!else
title 阿里巴巴 COLA 应用架构时序图
!endif

'skinparam BackgroundColor transparent

autonumber
participant "主动适配器" ${symbol_pound}SkyBlue
participant "${project.artifactId}-adapter" ${symbol_pound}LightGreen
participant "${project.artifactId}-app" ${symbol_pound}LightGreen
participant "${project.artifactId}-domain" ${symbol_pound}LightGreen
participant "${project.artifactId}-infrastructure" ${symbol_pound}LightGreen
participant "被动驱动器" ${symbol_pound}Pink
participant "扩展点" ${symbol_pound}Khaki

== 场景一：HTTP更新数据请求 ==

"主动适配器" -> "${project.artifactId}-adapter": 发送写请求报文
"${project.artifactId}-adapter" -> "${project.artifactId}-app": 适配器组装数据传输对象
"${project.artifactId}-app" -> "${project.artifactId}-app": CQRS 解析出命令参数
"${project.artifactId}-app" -> "扩展点": 根据指令调用扩展功能（可选项）
"${project.artifactId}-app" -> "${project.artifactId}-domain": 调用领域层
"${project.artifactId}-domain" -> "${project.artifactId}-infrastructure": 通过防腐层执行数据写操作
"${project.artifactId}-infrastructure" -> "被动驱动器": 调用底层组件进行写操作
"${project.artifactId}-infrastructure" --> "${project.artifactId}-app": 返回查询数据
"${project.artifactId}-app" --> "${project.artifactId}-adapter": 组装返回数据
"${project.artifactId}-adapter" --> "主动适配器": 响应报文

== 场景二：HTTP查询数据请求 ==

"主动适配器" -> "${project.artifactId}-adapter": 发送读请求报文
"${project.artifactId}-adapter" -> "${project.artifactId}-app": 适配器组装数据传输对象
"${project.artifactId}-app" -> "${project.artifactId}-app": CQRS 解析出查询参数
"${project.artifactId}-app" -> "${project.artifactId}-infrastructure": 执行数据读操作
"${project.artifactId}-infrastructure" -> "被动驱动器": 调用底层组件进行读操作
"${project.artifactId}-infrastructure" --> "${project.artifactId}-app": 返回查询数据
"${project.artifactId}-app" --> "${project.artifactId}-adapter": 组装返回数据
"${project.artifactId}-adapter" --> "主动适配器": 响应报文

== 场景三：MQ消息驱动/Job定时任务触发 ==

"主动适配器" -> "${project.artifactId}-adapter": 监听事件触发
"${project.artifactId}-adapter" -> "${project.artifactId}-app": CQRS 分发
alt${symbol_pound}Gold ${symbol_pound}LightBlue 领域调用
	"${project.artifactId}-app" -> "${project.artifactId}-domain": 调用领域层
	"${project.artifactId}-domain" -> "${project.artifactId}-infrastructure": 通过防腐层执行数据写操作
	"${project.artifactId}-infrastructure" -> "被动驱动器": 调用底层组件进行写操作
	"${project.artifactId}-infrastructure" --> "${project.artifactId}-app": 返回更新结果
else ${symbol_pound}Pink 简单查询
	"${project.artifactId}-app" -> "${project.artifactId}-infrastructure": 执行数据读操作
	"${project.artifactId}-infrastructure" -> "被动驱动器": 调用底层组件进行读操作
	"${project.artifactId}-infrastructure" --> "${project.artifactId}-app": 返回查询数据
end
"${project.artifactId}-app" -> "${project.artifactId}-app": 内部处理（ACK确认/Status状态）
"${project.artifactId}-app" --> "${project.artifactId}-adapter": 处理结果上报
"${project.artifactId}-adapter" --> "主动适配器": 上报结果

@enduml
